Index: design.ui
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ui version=\"4.0\">\r\n <class>MainWindow</class>\r\n <widget class=\"QMainWindow\" name=\"MainWindow\">\r\n  <property name=\"geometry\">\r\n   <rect>\r\n    <x>0</x>\r\n    <y>0</y>\r\n    <width>729</width>\r\n    <height>457</height>\r\n   </rect>\r\n  </property>\r\n  <property name=\"windowTitle\">\r\n   <string>Calculon</string>\r\n  </property>\r\n  <widget class=\"QWidget\" name=\"centralWidget\">\r\n   <property name=\"sizePolicy\">\r\n    <sizepolicy hsizetype=\"Maximum\" vsizetype=\"Maximum\">\r\n     <horstretch>0</horstretch>\r\n     <verstretch>0</verstretch>\r\n    </sizepolicy>\r\n   </property>\r\n   <layout class=\"QVBoxLayout\" name=\"verticalLayout\">\r\n    <item>\r\n     <layout class=\"QGridLayout\" name=\"gridLayout\">\r\n      <item row=\"12\" column=\"6\">\r\n       <widget class=\"QPushButton\" name=\"pushButton_11\">\r\n        <property name=\"minimumSize\">\r\n         <size>\r\n          <width>0</width>\r\n          <height>30</height>\r\n         </size>\r\n        </property>\r\n        <property name=\"text\">\r\n         <string>11</string>\r\n        </property>\r\n       </widget>\r\n      </item>\r\n      <item row=\"6\" column=\"3\" colspan=\"2\">\r\n       <widget class=\"QComboBox\" name=\"comboBox_3\">\r\n        <property name=\"maximumSize\">\r\n         <size>\r\n          <width>16777215</width>\r\n          <height>12</height>\r\n         </size>\r\n        </property>\r\n        <item>\r\n         <property name=\"text\">\r\n          <string>Обычный режим</string>\r\n         </property>\r\n        </item>\r\n        <item>\r\n         <property name=\"text\">\r\n          <string>Распознование людей</string>\r\n         </property>\r\n        </item>\r\n        <item>\r\n         <property name=\"text\">\r\n          <string>Распознование движения</string>\r\n         </property>\r\n        </item>\r\n        <item>\r\n         <property name=\"text\">\r\n          <string>Распознавание границ</string>\r\n         </property>\r\n        </item>\r\n       </widget>\r\n      </item>\r\n      <item row=\"3\" column=\"6\">\r\n       <widget class=\"QPushButton\" name=\"pushButton_4\">\r\n        <property name=\"minimumSize\">\r\n         <size>\r\n          <width>0</width>\r\n          <height>30</height>\r\n         </size>\r\n        </property>\r\n        <property name=\"text\">\r\n         <string>4</string>\r\n        </property>\r\n       </widget>\r\n      </item>\r\n      <item row=\"11\" column=\"6\">\r\n       <widget class=\"QPushButton\" name=\"pushButton_10\">\r\n        <property name=\"minimumSize\">\r\n         <size>\r\n          <width>0</width>\r\n          <height>30</height>\r\n         </size>\r\n        </property>\r\n        <property name=\"text\">\r\n         <string>10</string>\r\n        </property>\r\n       </widget>\r\n      </item>\r\n      <item row=\"0\" column=\"3\" rowspan=\"6\" colspan=\"2\">\r\n       <widget class=\"QLabel\" name=\"video_2\">\r\n        <property name=\"text\">\r\n         <string/>\r\n        </property>\r\n       </widget>\r\n      </item>\r\n      <item row=\"6\" column=\"0\" colspan=\"2\">\r\n       <widget class=\"QComboBox\" name=\"comboBox_1\">\r\n        <property name=\"maximumSize\">\r\n         <size>\r\n          <width>16777215</width>\r\n          <height>12</height>\r\n         </size>\r\n        </property>\r\n        <item>\r\n         <property name=\"text\">\r\n          <string>Обычный режим</string>\r\n         </property>\r\n        </item>\r\n        <item>\r\n         <property name=\"text\">\r\n          <string>Распознование людей</string>\r\n         </property>\r\n        </item>\r\n        <item>\r\n         <property name=\"text\">\r\n          <string>Распознование движения</string>\r\n         </property>\r\n        </item>\r\n        <item>\r\n         <property name=\"text\">\r\n          <string>Распознование границ</string>\r\n         </property>\r\n        </item>\r\n       </widget>\r\n      </item>\r\n      <item row=\"4\" column=\"6\">\r\n       <widget class=\"QPushButton\" name=\"pushButton_5\">\r\n        <property name=\"minimumSize\">\r\n         <size>\r\n          <width>0</width>\r\n          <height>30</height>\r\n         </size>\r\n        </property>\r\n        <property name=\"text\">\r\n         <string>5</string>\r\n        </property>\r\n       </widget>\r\n      </item>\r\n      <item row=\"0\" column=\"0\" rowspan=\"6\" colspan=\"2\">\r\n       <widget class=\"QLabel\" name=\"video_1\">\r\n        <property name=\"text\">\r\n         <string/>\r\n        </property>\r\n       </widget>\r\n      </item>\r\n      <item row=\"13\" column=\"6\" rowspan=\"2\">\r\n       <widget class=\"QPushButton\" name=\"pushButton_12\">\r\n        <property name=\"minimumSize\">\r\n         <size>\r\n          <width>0</width>\r\n          <height>30</height>\r\n         </size>\r\n        </property>\r\n        <property name=\"text\">\r\n         <string>12</string>\r\n        </property>\r\n       </widget>\r\n      </item>\r\n      <item row=\"10\" column=\"6\">\r\n       <widget class=\"QPushButton\" name=\"pushButton_9\">\r\n        <property name=\"minimumSize\">\r\n         <size>\r\n          <width>0</width>\r\n          <height>30</height>\r\n         </size>\r\n        </property>\r\n        <property name=\"text\">\r\n         <string>9</string>\r\n        </property>\r\n       </widget>\r\n      </item>\r\n      <item row=\"5\" column=\"6\" rowspan=\"2\">\r\n       <widget class=\"QPushButton\" name=\"pushButton_6\">\r\n        <property name=\"minimumSize\">\r\n         <size>\r\n          <width>0</width>\r\n          <height>30</height>\r\n         </size>\r\n        </property>\r\n        <property name=\"text\">\r\n         <string>6</string>\r\n        </property>\r\n       </widget>\r\n      </item>\r\n      <item row=\"7\" column=\"0\" colspan=\"2\">\r\n       <widget class=\"Line\" name=\"line_2\">\r\n        <property name=\"orientation\">\r\n         <enum>Qt::Horizontal</enum>\r\n        </property>\r\n       </widget>\r\n      </item>\r\n      <item row=\"8\" column=\"6\">\r\n       <widget class=\"QPushButton\" name=\"pushButton_7\">\r\n        <property name=\"minimumSize\">\r\n         <size>\r\n          <width>0</width>\r\n          <height>30</height>\r\n         </size>\r\n        </property>\r\n        <property name=\"text\">\r\n         <string>7</string>\r\n        </property>\r\n       </widget>\r\n      </item>\r\n      <item row=\"7\" column=\"3\" colspan=\"2\">\r\n       <widget class=\"Line\" name=\"line_3\">\r\n        <property name=\"orientation\">\r\n         <enum>Qt::Horizontal</enum>\r\n        </property>\r\n       </widget>\r\n      </item>\r\n      <item row=\"1\" column=\"6\">\r\n       <widget class=\"QPushButton\" name=\"pushButton_2\">\r\n        <property name=\"minimumSize\">\r\n         <size>\r\n          <width>0</width>\r\n          <height>30</height>\r\n         </size>\r\n        </property>\r\n        <property name=\"text\">\r\n         <string>2</string>\r\n        </property>\r\n       </widget>\r\n      </item>\r\n      <item row=\"9\" column=\"6\">\r\n       <widget class=\"QPushButton\" name=\"pushButton_8\">\r\n        <property name=\"minimumSize\">\r\n         <size>\r\n          <width>0</width>\r\n          <height>30</height>\r\n         </size>\r\n        </property>\r\n        <property name=\"text\">\r\n         <string>8</string>\r\n        </property>\r\n       </widget>\r\n      </item>\r\n      <item row=\"2\" column=\"6\">\r\n       <widget class=\"QPushButton\" name=\"pushButton_3\">\r\n        <property name=\"minimumSize\">\r\n         <size>\r\n          <width>0</width>\r\n          <height>30</height>\r\n         </size>\r\n        </property>\r\n        <property name=\"text\">\r\n         <string>3</string>\r\n        </property>\r\n       </widget>\r\n      </item>\r\n      <item row=\"0\" column=\"5\" rowspan=\"15\">\r\n       <widget class=\"Line\" name=\"line_4\">\r\n        <property name=\"orientation\">\r\n         <enum>Qt::Vertical</enum>\r\n        </property>\r\n       </widget>\r\n      </item>\r\n      <item row=\"0\" column=\"6\">\r\n       <widget class=\"QPushButton\" name=\"pushButton_1\">\r\n        <property name=\"minimumSize\">\r\n         <size>\r\n          <width>0</width>\r\n          <height>30</height>\r\n         </size>\r\n        </property>\r\n        <property name=\"text\">\r\n         <string>1</string>\r\n        </property>\r\n       </widget>\r\n      </item>\r\n      <item row=\"8\" column=\"0\" rowspan=\"6\" colspan=\"5\">\r\n       <widget class=\"QLabel\" name=\"video_3\">\r\n        <property name=\"text\">\r\n         <string/>\r\n        </property>\r\n       </widget>\r\n      </item>\r\n      <item row=\"0\" column=\"2\" rowspan=\"8\">\r\n       <widget class=\"Line\" name=\"line\">\r\n        <property name=\"orientation\">\r\n         <enum>Qt::Vertical</enum>\r\n        </property>\r\n       </widget>\r\n      </item>\r\n      <item row=\"14\" column=\"0\" colspan=\"5\">\r\n       <widget class=\"QComboBox\" name=\"comboBox_2\">\r\n        <property name=\"maximumSize\">\r\n         <size>\r\n          <width>16777215</width>\r\n          <height>12</height>\r\n         </size>\r\n        </property>\r\n        <item>\r\n         <property name=\"text\">\r\n          <string>Обычный режим</string>\r\n         </property>\r\n        </item>\r\n        <item>\r\n         <property name=\"text\">\r\n          <string>Распознавание людей</string>\r\n         </property>\r\n        </item>\r\n        <item>\r\n         <property name=\"text\">\r\n          <string>Распознавание движения</string>\r\n         </property>\r\n        </item>\r\n        <item>\r\n         <property name=\"text\">\r\n          <string>Распознавание границ</string>\r\n         </property>\r\n        </item>\r\n       </widget>\r\n      </item>\r\n     </layout>\r\n    </item>\r\n   </layout>\r\n  </widget>\r\n  <widget class=\"QStatusBar\" name=\"statusBar\"/>\r\n  <action name=\"actionExit\">\r\n   <property name=\"text\">\r\n    <string>Exit</string>\r\n   </property>\r\n   <property name=\"shortcut\">\r\n    <string>Ctrl+Q</string>\r\n   </property>\r\n  </action>\r\n  <action name=\"actionReset\">\r\n   <property name=\"text\">\r\n    <string>Reset</string>\r\n   </property>\r\n   <property name=\"shortcut\">\r\n    <string>Ctrl+R</string>\r\n   </property>\r\n  </action>\r\n </widget>\r\n <layoutdefault spacing=\"6\" margin=\"11\"/>\r\n <resources/>\r\n <connections/>\r\n</ui>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- design.ui	(revision 271a7f179d6f4d79e3b064874a1d2fb3c237e0e1)
+++ design.ui	(date 1543098713331)
@@ -7,7 +7,7 @@
     <x>0</x>
     <y>0</y>
     <width>729</width>
-    <height>457</height>
+    <height>492</height>
    </rect>
   </property>
   <property name="windowTitle">
@@ -41,7 +41,7 @@
         <property name="maximumSize">
          <size>
           <width>16777215</width>
-          <height>12</height>
+          <height>25</height>
          </size>
         </property>
         <item>
@@ -104,7 +104,7 @@
         <property name="maximumSize">
          <size>
           <width>16777215</width>
-          <height>12</height>
+          <height>25</height>
          </size>
         </property>
         <item>
@@ -293,7 +293,7 @@
         <property name="maximumSize">
          <size>
           <width>16777215</width>
-          <height>12</height>
+          <height>25</height>
          </size>
         </property>
         <item>
Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import sys\r\nimport time\r\n\r\nimport cv2\r\nimport imutils\r\nimport numpy as np\r\nimport tensorflow as tf\r\nfrom PyQt5.QtCore import *\r\nfrom PyQt5.QtGui import *\r\nfrom PyQt5.QtWidgets import *\r\nfrom imutils.video import VideoStream\r\n\r\nimport design\r\nimport cameramode\r\n\r\nduration = 1000  # millisecond\r\nfreq = 440  # Hz\r\n\r\nglobal circles\r\ncircles = []\r\nglobal isPressMarkUpButton\r\nisPressMarkUpButton = False\r\nglobal isPolyCreated\r\nisPolyCreated = False\r\n\r\nCONFIDENCE_LEVEL = 0.7  # HERE - нижний порог уверенности модели от 0 до 1.\r\n                        # 0.7 - объект в кадре будет обведён рамкой, если\r\n                        #       сеть уверена на 70% и выше\r\nCLASSES_TO_DETECT = [\r\n    1,      # person\r\n    16,     # cat\r\n    17      # dog\r\n]  # HERE - классы для обнаружения, см. файл classes_en.txt\r\n   # номер класса = номер строки, нумерация с 1\r\n\r\n\r\ndef mouse_drawing(event, x, y):\r\n    if event == cv2.EVENT_LBUTTONDOWN:\r\n        print(\"Left click\")\r\n        circles.append((x, y))\r\n\r\n\r\ndef in_polygon(x, y, xp, yp):\r\n    c = 0\r\n    for i in range(len(xp)):\r\n        if (((yp[i] <= y and y < yp[i - 1]) or (yp[i - 1] <= y and y < yp[i])) and \\\r\n                (x > (xp[i - 1] - xp[i]) * (y - yp[i]) / (yp[i - 1] - yp[i]) + xp[i])): c = 1 - c\r\n    return c\r\n\r\n\r\ndef is_pixels_in_area(start_x, start_y, end_x, end_y, xp, yp):\r\n    \"\"\"ret = False\r\n    for y in range(start_y, end_y):\r\n        for x in range(start_x, end_x):\r\n            if in_polygon(x, y, xp, yp):\r\n                ret = True\r\n    return ret\"\"\"\r\n    for y in range(start_y, end_y):\r\n        for x in range(start_x, end_x):\r\n            if in_polygon(x, y, xp, yp):\r\n                return True\r\n    return False\r\n\r\n\r\nclass DetectorAPI:\r\n    def __init__(self, path_to_ckpt, path_to_labels):\r\n        self.detection_graph = tf.Graph()\r\n        with self.detection_graph.as_default():\r\n            od_graph_def = tf.GraphDef()\r\n            with tf.gfile.GFile(path_to_ckpt, 'rb') as fid:\r\n                serialized_graph = fid.read()\r\n                od_graph_def.ParseFromString(serialized_graph)\r\n                tf.import_graph_def(od_graph_def, name='')\r\n\r\n        self.default_graph = self.detection_graph.as_default()\r\n        self.sess = tf.Session(graph=self.detection_graph)\r\n\r\n        # Definite input and output Tensors for detection_graph\r\n        self.image_tensor = self.detection_graph.get_tensor_by_name('image_tensor:0')\r\n        # Each box represents a part of the image where a particular object was detected.\r\n        self.detection_boxes = self.detection_graph.get_tensor_by_name('detection_boxes:0')\r\n        # Each score represent how level of confidence for each of the objects.\r\n        # Score is shown on the result image, together with the class label.\r\n        self.detection_scores = self.detection_graph.get_tensor_by_name('detection_scores:0')\r\n        self.detection_classes = self.detection_graph.get_tensor_by_name('detection_classes:0')\r\n        self.num_detections = self.detection_graph.get_tensor_by_name('num_detections:0')\r\n\r\n        with open(path_to_labels) as f:\r\n            self.labels = f.readlines()\r\n        self.labels = [s.strip() for s in self.labels]\r\n\r\n    def process(self, image):\r\n        # Expand dimensions since the trained_model expects images to have shape: [1, None, None, 3]\r\n        image_np_expanded = np.expand_dims(image, axis=0)\r\n\r\n        # Actual detection.\r\n        (boxes, scores, classes, num) = self.sess.run(\r\n            [self.detection_boxes, self.detection_scores, self.detection_classes, self.num_detections],\r\n            feed_dict={self.image_tensor: image_np_expanded})\r\n\r\n        im_height, im_width, _ = image.shape\r\n        boxes_list = [None for i in range(boxes.shape[1])]\r\n        for i in range(boxes.shape[1]):\r\n            boxes_list[i] = (int(boxes[0, i, 0] * im_height),\r\n                             int(boxes[0, i, 1] * im_width),\r\n                             int(boxes[0, i, 2] * im_height),\r\n                             int(boxes[0, i, 3] * im_width))\r\n\r\n        return boxes_list, scores[0].tolist(), [int(x) for x in classes[0].tolist()], int(num[0])\r\n\r\n    def close(self):\r\n        self.sess.close()\r\n        # self.default_graph.close()  # AttributeError: '_GeneratorContextManager' object has no attribute 'close'\r\n\r\n\r\nclass UI(QMainWindow, design.Ui_MainWindow):\r\n    def __init__(self):\r\n        # Это здесь нужно для доступа к переменным, методам\r\n        # и т.д. в файле design.py\r\n        super().__init__()\r\n        self.setupUi(self)  # Это нужно для инициализации нашего дизайна\r\n        self.image = None\r\n        self.width_standard = 600\r\n        self.width360 = 800\r\n        model_name = 'faster_rcnn_inception_v2_coco_2018_01_28'  # HERE - название папки с моделью\r\n        model_path = '../cocozoo/' + model_name + '/frozen_inference_graph.pb'  # HERE\r\n        labels_path = 'classes_en.txt'  # HERE - файл с подписями для классов\r\n        self.detector = DetectorAPI(path_to_ckpt=model_path,\r\n                                    path_to_labels=labels_path)\r\n        self.start_video()\r\n        self.setWindowTitle('Security System')\r\n        self.pushButton_1.clicked.connect(self.mark_up)\r\n        self.comboBox_1.currentTextChanged.connect(self.video_one_change_mode)\r\n        self.comboBox_2.currentTextChanged.connect(\r\n            self.video_two_change_mode)  # есть подозрения что можно передавать значения в функцию\r\n        self.comboBox_3.currentTextChanged.connect(self.video_three_change_mode)\r\n\r\n    def resizeEvent(self, event):\r\n        super().__init__()\r\n        self.width_standard = self.video_1.width()\r\n        self.width360 = self.video_3.width()\r\n\r\n    @staticmethod\r\n    def mark_up():\r\n        global isPressMarkUpButton\r\n        isPressMarkUpButton = not isPressMarkUpButton\r\n\r\n    def start_video(self):\r\n        # WORK VERSION\r\n        self.v1 = Video(src=0, detector=self.detector)\r\n        self.v2 = Video(src=0, detector=self.detector)\r\n        self.v2.stop()\r\n        self.v3 = Video(src=0, detector=self.detector)\r\n        self.v3.stop()\r\n        # END OF WORK VERSION\r\n\r\n        # DEBUG VERSION\r\n        \"\"\"self.v1 = Video(src='../cat.mp4',detector=self.detector)\r\n        self.v2 = Video(src='../people.mp4',detector=self.detector)\r\n        self.v2.stop()\r\n        self.v3 = Video(src='../people.mp4',detector=self.detector)\r\n        self.v3.stop()\r\n        self.count = 0\"\"\"\r\n        # END OF DEBUG VERSION\r\n\r\n        self.timer = QTimer()\r\n        self.timer.timeout.connect(self.update_video)\r\n        self.timer.start(5)\r\n\r\n    def update_video(self):\r\n        # DEBUG VERSION\r\n        \"\"\"self.v1.get_frame()\r\n        self.count += 1\r\n        if self.count % 30 == 0:\r\n            print('Frame', self.count)\r\n        if self.count < 925:\r\n            return\"\"\"\r\n        # END OF DEBUG VERSION\r\n\r\n        if self.v1.isPlay:\r\n            a = self.v1.get_image_qt(self.v1.get_smart_frame(self.width_standard))\r\n            self.video_1.setPixmap(a)\r\n        if self.v2.isPlay:\r\n            a = self.v2.get_image_qt(self.v2.get_smart_frame(self.width_standard))\r\n            self.video_2.setPixmap(a)\r\n        if self.v3.isPlay:\r\n            a = self.v3.get_image_qt(self.v2.get_smart_frame(self.width_standard))\r\n            self.video_3.setPixmap(a)\r\n\r\n    def closeEvent(self, event):\r\n        reply = QMessageBox.question(self, 'Message', \"Вы действительно хотите закрыть охранную систему\",\r\n                                     QMessageBox.Yes | QMessageBox.No, QMessageBox.No)\r\n        if reply == QMessageBox.Yes:\r\n            self.detector.close()\r\n            event.accept()\r\n        else:\r\n            event.ignore()\r\n\r\n    def video_one_change_mode(self, value):\r\n        self.change_mod_by_mod(value, self.v1)\r\n\r\n    def video_two_change_mode(self, value):\r\n        self.change_mod_by_mod(value, self.v2)\r\n\r\n    def video_three_change_mode(self, value):\r\n        self.change_mod_by_mod(value, self.v3)\r\n\r\n    @staticmethod\r\n    def change_mod_by_mod(value, obj):\r\n        if value == \"Обычный режим\":\r\n            obj.set_mode = cameramode.ORIGINAL\r\n        elif value == \"Распознование людей\":\r\n            obj.set_mode = cameramode.DETECT_OBJECTS\r\n        elif value == \"Распознование движения\":\r\n            obj.set_mode = cameramode.DETECT_MOTION\r\n        elif value == \"Распознование границ\":\r\n            obj.set_mode = cameramode.DETECT_BORDERS\r\n        else:\r\n            print(value + \" is not find\")\r\n\r\n\r\nclass Video:\r\n    def __init__(self, src=0, detector=None, color1=(0, 255, 0),\r\n                 color2=(0, 0, 255), color3=(255, 0, 0), mode=cameramode.ORIGINAL):\r\n        self.mode = mode\r\n        self.vc = cv2.VideoCapture(src)\r\n        # DEBUG VERSION\r\n        self.vs = VideoStream(src=src).start()\r\n        # END OF DEBUG VERSION\r\n        self.detector = detector\r\n        print(\"start\")\r\n        self.color1 = color1\r\n        self.color2 = color2\r\n        self.color3 = color3\r\n        self.isPlay = True\r\n\r\n    def get_smart_frame(self, width=500):\r\n        # пока что не реализовано обнаружение движения - константа cameramode.DETECT_MOTION\r\n        if self.mode == cameramode.DETECT_OBJECTS:\r\n            return self.get_frame_detected(width)\r\n        elif self.mode == cameramode.DETECT_BORDERS:\r\n            return self.get_polygon_frame(width)\r\n        else:\r\n            return self.get_frame(width)\r\n\r\n    def get_frame(self, width=500):\r\n        # WORK VERSION\r\n        frame = self.vs.read()\r\n        if frame is None:\r\n            _, frame = self.vc.read()\r\n        frame = imutils.resize(frame, width=width)\r\n        # END OF WORK VERSION\r\n\r\n        # DEBUG VERSION\r\n        \"\"\"_, frame = self.vc.read()\"\"\"\r\n        # END OF DEBUG VERSION\r\n\r\n        return frame\r\n\r\n    # For first cam-capture\r\n    def detect(self, width=500, img=None):\r\n        if img is None:\r\n            img = self.get_frame(width)\r\n        boxes, scores, classes, num = self.detector.process(img)\r\n\r\n        d_boxes = []\r\n        d_scores = []\r\n        d_classes = []\r\n        for i in range(len(boxes)):\r\n            if classes[i] in CLASSES_TO_DETECT and scores[i] > CONFIDENCE_LEVEL:\r\n                d_boxes.append(boxes[i])\r\n                d_scores.append(scores[i])\r\n                d_classes.append(classes[i])\r\n        return d_boxes, d_scores, d_classes\r\n\r\n    def get_frame_detected(self, width=500, img=None):\r\n        if img is None:\r\n            img = self.get_frame(width)\r\n        boxes, scores, classes = self.detect(img)\r\n        for i in range(len(boxes)):\r\n            box = boxes[i]\r\n            cv2.rectangle(img, (box[1], box[0]), (box[3], box[2]), self.color1, 2)\r\n            y = box[0] - 15 if box[0] - 15 > 15 else box[0] + 15\r\n            cv2.putText(img, self.detector.labels[classes[i] - 1], (box[1], y),\r\n                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, self.color1, 2)\r\n        return img\r\n\r\n    def get_polygon_image(self, width=700, img=None):\r\n        global circles\r\n        global isPressMarkUpButton\r\n        global isPolyCreated\r\n        if img is None:\r\n            img = self.get_frame(width)\r\n        # img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # продублировано в get_image_qt()\r\n        cv2.namedWindow(\"Frame\")\r\n        points = np.array(circles)\r\n\r\n        if isPressMarkUpButton:\r\n            cv2.setMouseCallback(\"Frame\", mouse_drawing)\r\n            for center_position in circles:\r\n                cv2.circle(img, center_position, 2, (0, 0, 255), -1)\r\n\r\n        if len(points) >= 4 and isPressMarkUpButton == False:\r\n            cv2.polylines(img, np.int32([points]), 1, (255, 255, 255))\r\n            isPolyCreated = True\r\n            stencil = np.zeros(img.shape).astype(img.dtype)\r\n            stencil[:] = (255, 255, 255)\r\n            cv2.fillPoly(stencil, np.int32([points]), (255, 255, 255))\r\n            img = cv2.bitwise_and(img, stencil)\r\n\r\n        cv2.imshow(\"Frame\", img)\r\n\r\n        key = cv2.waitKey(1)\r\n        if key == ord(\"d\"):\r\n            circles = []\r\n            isPressMarkUpButton = False\r\n            isPolyCreated = False\r\n            img = self.get_frame()\r\n\r\n        return img\r\n\r\n    def get_polygon_frame(self, width=500):\r\n        frame = self.get_polygon_image(width)\r\n        # (w, h) = frame.shape[:2]\r\n\r\n        boxes, scores, classes = self.detect(frame)\r\n        print(len(boxes), 'object(s) detected')\r\n\r\n        for i in range(len(boxes)):\r\n            box = boxes[i]\r\n            # box = box * np.array([w, h, w, h])\r\n            (startX, startY, endX, endY) = box\r\n            label = self.detector.labels[classes[i] - 1]\r\n\r\n            if isPolyCreated:\r\n                # print('ok its draw')\r\n                points = np.array(circles)\r\n                if (in_polygon((startX + endX) / 2, (startY + endY) / 2, points[:, 0], points[:, 1])):\r\n                    # print('draw 1')\r\n                    # if(isPixelsInArea(startX, startY, endX, endY,points[:, 0], points[:, 1])):\r\n                    cv2.rectangle(frame, (startX, startY), (endX, endY), self.color3, 2)\r\n                    y = startY - 15 if startY - 15 > 15 else startY + 15\r\n                    cv2.putText(frame, \"not a good guy\", (startX, y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, self.color3, 2)\r\n                else:\r\n                    # print('draw 2')\r\n                    cv2.rectangle(frame, (startX, startY), (endX, endY), self.color1, 2)\r\n                    y = startY - 15 if startY - 15 > 15 else startY + 15\r\n                    cv2.putText(frame, label, (startX, y), cv2.FONT_HERSHEY_SIMPLEX, 0.5, self.color1, 2)\r\n        return frame\r\n\r\n    @staticmethod\r\n    def get_image_qt(frame):\r\n        rgb_image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\r\n        convert_to_qt_format = QImage(rgb_image.data, rgb_image.shape[1], rgb_image.shape[0], QImage.Format_RGB888)\r\n        p = convert_to_qt_format.scaled(300, 200, Qt.KeepAspectRatio)  # текущие координаты\r\n        return QPixmap.fromImage(p)\r\n\r\n    def play(self):\r\n        self.isPlay = True\r\n        self.vs.play()\r\n\r\n    def stop(self):\r\n        self.isPlay = False\r\n        self.vs.stop()\r\n\r\n    def set_mode(self, state=None):\r\n        if state is None:\r\n            return self.mode\r\n        else:\r\n            self.mode = state\r\n\r\n\r\ndef main():\r\n    app = QApplication(sys.argv)  # Новый экземпляр QApplication\r\n    window = UI()  # Создаём объект класса ExampleApp\r\n    window.show()  # Показываем окно\r\n    app.exec_()  # и запускаем прило\r\n\r\n\r\nif __name__ == '__main__':\r\n    main()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- main.py	(revision 271a7f179d6f4d79e3b064874a1d2fb3c237e0e1)
+++ main.py	(date 1543099829088)
@@ -123,7 +123,7 @@
         self.width_standard = 600
         self.width360 = 800
         model_name = 'faster_rcnn_inception_v2_coco_2018_01_28'  # HERE - название папки с моделью
-        model_path = '../cocozoo/' + model_name + '/frozen_inference_graph.pb'  # HERE
+        model_path = model_name + '/frozen_inference_graph.pb'  # HERE
         labels_path = 'classes_en.txt'  # HERE - файл с подписями для классов
         self.detector = DetectorAPI(path_to_ckpt=model_path,
                                     path_to_labels=labels_path)
@@ -221,7 +221,7 @@
 
 class Video:
     def __init__(self, src=0, detector=None, color1=(0, 255, 0),
-                 color2=(0, 0, 255), color3=(255, 0, 0), mode=cameramode.ORIGINAL):
+                 color2=(0, 0, 255), color3=(255, 0, 0), mode=cameramode.DETECT_OBJECTS):
         self.mode = mode
         self.vc = cv2.VideoCapture(src)
         # DEBUG VERSION
@@ -378,4 +378,4 @@
 
 
 if __name__ == '__main__':
-    main()
+    main()
\ No newline at end of file
Index: design.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># -*- coding: utf-8 -*-\r\n\r\n# Form implementation generated from reading ui file 'D:\\pub\\Downloads\\opencv\\design.ui'\r\n#\r\n# Created by: PyQt5 UI code generator 5.11.3\r\n#\r\n# WARNING! All changes made in this file will be lost!\r\n\r\nfrom PyQt5 import QtCore, QtGui, QtWidgets\r\n\r\nclass Ui_MainWindow(object):\r\n    def setupUi(self, MainWindow):\r\n        MainWindow.setObjectName(\"MainWindow\")\r\n        MainWindow.resize(729, 457)\r\n        self.centralWidget = QtWidgets.QWidget(MainWindow)\r\n        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Maximum)\r\n        sizePolicy.setHorizontalStretch(0)\r\n        sizePolicy.setVerticalStretch(0)\r\n        sizePolicy.setHeightForWidth(self.centralWidget.sizePolicy().hasHeightForWidth())\r\n        self.centralWidget.setSizePolicy(sizePolicy)\r\n        self.centralWidget.setObjectName(\"centralWidget\")\r\n        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralWidget)\r\n        self.verticalLayout.setContentsMargins(11, 11, 11, 11)\r\n        self.verticalLayout.setSpacing(6)\r\n        self.verticalLayout.setObjectName(\"verticalLayout\")\r\n        self.gridLayout = QtWidgets.QGridLayout()\r\n        self.gridLayout.setSpacing(6)\r\n        self.gridLayout.setObjectName(\"gridLayout\")\r\n        self.pushButton_11 = QtWidgets.QPushButton(self.centralWidget)\r\n        self.pushButton_11.setMinimumSize(QtCore.QSize(0, 30))\r\n        self.pushButton_11.setObjectName(\"pushButton_11\")\r\n        self.gridLayout.addWidget(self.pushButton_11, 12, 6, 1, 1)\r\n        self.comboBox_3 = QtWidgets.QComboBox(self.centralWidget)\r\n        self.comboBox_3.setMaximumSize(QtCore.QSize(16777215, 12))\r\n        self.comboBox_3.setObjectName(\"comboBox_3\")\r\n        self.comboBox_3.addItem(\"\")\r\n        self.comboBox_3.addItem(\"\")\r\n        self.comboBox_3.addItem(\"\")\r\n        self.comboBox_3.addItem(\"\")\r\n        self.gridLayout.addWidget(self.comboBox_3, 6, 3, 1, 2)\r\n        self.pushButton_4 = QtWidgets.QPushButton(self.centralWidget)\r\n        self.pushButton_4.setMinimumSize(QtCore.QSize(0, 30))\r\n        self.pushButton_4.setObjectName(\"pushButton_4\")\r\n        self.gridLayout.addWidget(self.pushButton_4, 3, 6, 1, 1)\r\n        self.pushButton_10 = QtWidgets.QPushButton(self.centralWidget)\r\n        self.pushButton_10.setMinimumSize(QtCore.QSize(0, 30))\r\n        self.pushButton_10.setObjectName(\"pushButton_10\")\r\n        self.gridLayout.addWidget(self.pushButton_10, 11, 6, 1, 1)\r\n        self.video_2 = QtWidgets.QLabel(self.centralWidget)\r\n        self.video_2.setText(\"\")\r\n        self.video_2.setObjectName(\"video_2\")\r\n        self.gridLayout.addWidget(self.video_2, 0, 3, 6, 2)\r\n        self.comboBox_1 = QtWidgets.QComboBox(self.centralWidget)\r\n        self.comboBox_1.setMaximumSize(QtCore.QSize(16777215, 12))\r\n        self.comboBox_1.setObjectName(\"comboBox_1\")\r\n        self.comboBox_1.addItem(\"\")\r\n        self.comboBox_1.addItem(\"\")\r\n        self.comboBox_1.addItem(\"\")\r\n        self.comboBox_1.addItem(\"\")\r\n        self.gridLayout.addWidget(self.comboBox_1, 6, 0, 1, 2)\r\n        self.pushButton_5 = QtWidgets.QPushButton(self.centralWidget)\r\n        self.pushButton_5.setMinimumSize(QtCore.QSize(0, 30))\r\n        self.pushButton_5.setObjectName(\"pushButton_5\")\r\n        self.gridLayout.addWidget(self.pushButton_5, 4, 6, 1, 1)\r\n        self.video_1 = QtWidgets.QLabel(self.centralWidget)\r\n        self.video_1.setText(\"\")\r\n        self.video_1.setObjectName(\"video_1\")\r\n        self.gridLayout.addWidget(self.video_1, 0, 0, 6, 2)\r\n        self.pushButton_12 = QtWidgets.QPushButton(self.centralWidget)\r\n        self.pushButton_12.setMinimumSize(QtCore.QSize(0, 30))\r\n        self.pushButton_12.setObjectName(\"pushButton_12\")\r\n        self.gridLayout.addWidget(self.pushButton_12, 13, 6, 2, 1)\r\n        self.pushButton_9 = QtWidgets.QPushButton(self.centralWidget)\r\n        self.pushButton_9.setMinimumSize(QtCore.QSize(0, 30))\r\n        self.pushButton_9.setObjectName(\"pushButton_9\")\r\n        self.gridLayout.addWidget(self.pushButton_9, 10, 6, 1, 1)\r\n        self.pushButton_6 = QtWidgets.QPushButton(self.centralWidget)\r\n        self.pushButton_6.setMinimumSize(QtCore.QSize(0, 30))\r\n        self.pushButton_6.setObjectName(\"pushButton_6\")\r\n        self.gridLayout.addWidget(self.pushButton_6, 5, 6, 2, 1)\r\n        self.line_2 = QtWidgets.QFrame(self.centralWidget)\r\n        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)\r\n        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)\r\n        self.line_2.setObjectName(\"line_2\")\r\n        self.gridLayout.addWidget(self.line_2, 7, 0, 1, 2)\r\n        self.pushButton_7 = QtWidgets.QPushButton(self.centralWidget)\r\n        self.pushButton_7.setMinimumSize(QtCore.QSize(0, 30))\r\n        self.pushButton_7.setObjectName(\"pushButton_7\")\r\n        self.gridLayout.addWidget(self.pushButton_7, 8, 6, 1, 1)\r\n        self.line_3 = QtWidgets.QFrame(self.centralWidget)\r\n        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)\r\n        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)\r\n        self.line_3.setObjectName(\"line_3\")\r\n        self.gridLayout.addWidget(self.line_3, 7, 3, 1, 2)\r\n        self.pushButton_2 = QtWidgets.QPushButton(self.centralWidget)\r\n        self.pushButton_2.setMinimumSize(QtCore.QSize(0, 30))\r\n        self.pushButton_2.setObjectName(\"pushButton_2\")\r\n        self.gridLayout.addWidget(self.pushButton_2, 1, 6, 1, 1)\r\n        self.pushButton_8 = QtWidgets.QPushButton(self.centralWidget)\r\n        self.pushButton_8.setMinimumSize(QtCore.QSize(0, 30))\r\n        self.pushButton_8.setObjectName(\"pushButton_8\")\r\n        self.gridLayout.addWidget(self.pushButton_8, 9, 6, 1, 1)\r\n        self.pushButton_3 = QtWidgets.QPushButton(self.centralWidget)\r\n        self.pushButton_3.setMinimumSize(QtCore.QSize(0, 30))\r\n        self.pushButton_3.setObjectName(\"pushButton_3\")\r\n        self.gridLayout.addWidget(self.pushButton_3, 2, 6, 1, 1)\r\n        self.line_4 = QtWidgets.QFrame(self.centralWidget)\r\n        self.line_4.setFrameShape(QtWidgets.QFrame.VLine)\r\n        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)\r\n        self.line_4.setObjectName(\"line_4\")\r\n        self.gridLayout.addWidget(self.line_4, 0, 5, 15, 1)\r\n        self.pushButton_1 = QtWidgets.QPushButton(self.centralWidget)\r\n        self.pushButton_1.setMinimumSize(QtCore.QSize(0, 30))\r\n        self.pushButton_1.setObjectName(\"pushButton_1\")\r\n        self.gridLayout.addWidget(self.pushButton_1, 0, 6, 1, 1)\r\n        self.video_3 = QtWidgets.QLabel(self.centralWidget)\r\n        self.video_3.setText(\"\")\r\n        self.video_3.setObjectName(\"video_3\")\r\n        self.gridLayout.addWidget(self.video_3, 8, 0, 6, 5)\r\n        self.line = QtWidgets.QFrame(self.centralWidget)\r\n        self.line.setFrameShape(QtWidgets.QFrame.VLine)\r\n        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)\r\n        self.line.setObjectName(\"line\")\r\n        self.gridLayout.addWidget(self.line, 0, 2, 8, 1)\r\n        self.comboBox_2 = QtWidgets.QComboBox(self.centralWidget)\r\n        self.comboBox_2.setMaximumSize(QtCore.QSize(16777215, 12))\r\n        self.comboBox_2.setObjectName(\"comboBox_2\")\r\n        self.comboBox_2.addItem(\"\")\r\n        self.comboBox_2.addItem(\"\")\r\n        self.comboBox_2.addItem(\"\")\r\n        self.comboBox_2.addItem(\"\")\r\n        self.gridLayout.addWidget(self.comboBox_2, 14, 0, 1, 5)\r\n        self.verticalLayout.addLayout(self.gridLayout)\r\n        MainWindow.setCentralWidget(self.centralWidget)\r\n        self.statusBar = QtWidgets.QStatusBar(MainWindow)\r\n        self.statusBar.setObjectName(\"statusBar\")\r\n        MainWindow.setStatusBar(self.statusBar)\r\n        self.actionExit = QtWidgets.QAction(MainWindow)\r\n        self.actionExit.setObjectName(\"actionExit\")\r\n        self.actionReset = QtWidgets.QAction(MainWindow)\r\n        self.actionReset.setObjectName(\"actionReset\")\r\n\r\n        self.retranslateUi(MainWindow)\r\n        QtCore.QMetaObject.connectSlotsByName(MainWindow)\r\n\r\n    def retranslateUi(self, MainWindow):\r\n        _translate = QtCore.QCoreApplication.translate\r\n        MainWindow.setWindowTitle(_translate(\"MainWindow\", \"Calculon\"))\r\n        self.pushButton_11.setText(_translate(\"MainWindow\", \"11\"))\r\n        self.comboBox_3.setItemText(0, _translate(\"MainWindow\", \"Обычный режим\"))\r\n        self.comboBox_3.setItemText(1, _translate(\"MainWindow\", \"Распознование людей\"))\r\n        self.comboBox_3.setItemText(2, _translate(\"MainWindow\", \"Распознование движения\"))\r\n        self.comboBox_3.setItemText(3, _translate(\"MainWindow\", \"Распознавание границ\"))\r\n        self.pushButton_4.setText(_translate(\"MainWindow\", \"4\"))\r\n        self.pushButton_10.setText(_translate(\"MainWindow\", \"10\"))\r\n        self.comboBox_1.setItemText(0, _translate(\"MainWindow\", \"Обычный режим\"))\r\n        self.comboBox_1.setItemText(1, _translate(\"MainWindow\", \"Распознование людей\"))\r\n        self.comboBox_1.setItemText(2, _translate(\"MainWindow\", \"Распознование движения\"))\r\n        self.comboBox_1.setItemText(3, _translate(\"MainWindow\", \"Распознование границ\"))\r\n        self.pushButton_5.setText(_translate(\"MainWindow\", \"5\"))\r\n        self.pushButton_12.setText(_translate(\"MainWindow\", \"12\"))\r\n        self.pushButton_9.setText(_translate(\"MainWindow\", \"9\"))\r\n        self.pushButton_6.setText(_translate(\"MainWindow\", \"6\"))\r\n        self.pushButton_7.setText(_translate(\"MainWindow\", \"7\"))\r\n        self.pushButton_2.setText(_translate(\"MainWindow\", \"2\"))\r\n        self.pushButton_8.setText(_translate(\"MainWindow\", \"8\"))\r\n        self.pushButton_3.setText(_translate(\"MainWindow\", \"3\"))\r\n        self.pushButton_1.setText(_translate(\"MainWindow\", \"1\"))\r\n        self.comboBox_2.setItemText(0, _translate(\"MainWindow\", \"Обычный режим\"))\r\n        self.comboBox_2.setItemText(1, _translate(\"MainWindow\", \"Распознавание людей\"))\r\n        self.comboBox_2.setItemText(2, _translate(\"MainWindow\", \"Распознавание движения\"))\r\n        self.comboBox_2.setItemText(3, _translate(\"MainWindow\", \"Распознавание границ\"))\r\n        self.actionExit.setText(_translate(\"MainWindow\", \"Exit\"))\r\n        self.actionExit.setShortcut(_translate(\"MainWindow\", \"Ctrl+Q\"))\r\n        self.actionReset.setText(_translate(\"MainWindow\", \"Reset\"))\r\n        self.actionReset.setShortcut(_translate(\"MainWindow\", \"Ctrl+R\"))\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- design.py	(revision 271a7f179d6f4d79e3b064874a1d2fb3c237e0e1)
+++ design.py	(date 1543098741121)
@@ -31,7 +31,7 @@
         self.pushButton_11.setObjectName("pushButton_11")
         self.gridLayout.addWidget(self.pushButton_11, 12, 6, 1, 1)
         self.comboBox_3 = QtWidgets.QComboBox(self.centralWidget)
-        self.comboBox_3.setMaximumSize(QtCore.QSize(16777215, 12))
+        self.comboBox_3.setMaximumSize(QtCore.QSize(16777215, 30))
         self.comboBox_3.setObjectName("comboBox_3")
         self.comboBox_3.addItem("")
         self.comboBox_3.addItem("")
@@ -51,7 +51,7 @@
         self.video_2.setObjectName("video_2")
         self.gridLayout.addWidget(self.video_2, 0, 3, 6, 2)
         self.comboBox_1 = QtWidgets.QComboBox(self.centralWidget)
-        self.comboBox_1.setMaximumSize(QtCore.QSize(16777215, 12))
+        self.comboBox_1.setMaximumSize(QtCore.QSize(16777215, 30))
         self.comboBox_1.setObjectName("comboBox_1")
         self.comboBox_1.addItem("")
         self.comboBox_1.addItem("")
@@ -123,7 +123,7 @@
         self.line.setObjectName("line")
         self.gridLayout.addWidget(self.line, 0, 2, 8, 1)
         self.comboBox_2 = QtWidgets.QComboBox(self.centralWidget)
-        self.comboBox_2.setMaximumSize(QtCore.QSize(16777215, 12))
+        self.comboBox_2.setMaximumSize(QtCore.QSize(16777215, 30))
         self.comboBox_2.setObjectName("comboBox_2")
         self.comboBox_2.addItem("")
         self.comboBox_2.addItem("")
